package main

import (
	"crypto/x509"
	"encoding/pem"
	"errors"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func devcertInfo(args []string) (err error) {
	filename := args[0]

	cb, err := os.ReadFile(filename)
	if err != nil {
		return
	}

	certBlock, _ := pem.Decode(cb)
	if certBlock == nil || certBlock.Type != "CERTIFICATE" {
		err = errors.New("invalid certificate")
		return
	}

	cert, err := x509.ParseCertificate(certBlock.Bytes)
	if err != nil {
		return
	}

	isCAHuman := "No"
	if cert.IsCA {
		isCAHuman = "Yes"
	}

	isDevcertHuman := "No"
	if cert.Issuer.CommonName == commonNameCA {
		isDevcertHuman = "Yes"
	}

	fmt.Printf("\nCertificate Info:")
	fmt.Printf("\n  - Is CA: %s", isCAHuman)
	fmt.Printf("\n  - Generated by devcert: %s", isDevcertHuman)
	fmt.Printf("\n  - Issuer: %s", cert.Issuer.CommonName)

	if !cert.IsCA {
		fmt.Printf("\n  - Domain(s): %s", strings.Join(cert.DNSNames, ", "))
	}

	fmt.Printf("\n  - Signature Algorithm: %s", cert.SignatureAlgorithm)
	fmt.Printf("\n  - Version: %s", strconv.Itoa(cert.Version))
	fmt.Printf("\n  - Valid Until: %s", cert.NotAfter)
	
	fmt.Printf("\n")

	return
}
